AWSTemplateFormatVersion: '2010-09-09'
Description: Architettura ad alta disponibilità per WordPress con RDS replica in standby



Parameters:

# Parametro variabile WordPressVersion, per il versionamento di WordPress.
  WordPressVersion:
    Description: Version of WordPress to install
    Type: String
    Default: latest
    AllowedValues: [latest, 6.2.2,6.2.1, 6.2, 6.1.3, 6.1.2, 6.1.1, 6.1, 5.8.1, 5.8, 5.7.3, 5.7, 5.6.4, 5.6, 5.5.6, 5.5, 5.4.7, 5.4]

# Paramentri CidrBlock per VPC e Subnets
  VpcCidrBlock:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CidrBlock:
    Description: CIDR block for the public subnet 1
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CidrBlock:
    Description: CIDR block for the public subnet 2
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CidrBlock:
    Description: CIDR block for the private subnet 1
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CidrBlock:
    Description: CIDR block for the private subnet 2
    Type: String
    Default: 10.0.3.0/24


Resources:

#VPC
 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "VPC"

#Subnets
#Questo set di 4 subnets è composto da due sub pubbliche e due private.

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: !Ref PrivateSubnet1CidrBlock

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: !Ref PrivateSubnet2CidrBlock


#Route Table Pubblica
#Di seguito la PublicRouteTable con route e associazione per puntare la publicsubnet1 all' InternetGateway


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable


# INTERNETGATEWAY
# Creo l' Internet Gateway per instradare il traffico.  

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


#Route Table Pivata
# Table e route per far puntare la PrivateSubnet1 a internet attraverso il NATGateway

  

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable



# NATGATEWAY
# Qui ho creato l' Elastic IP e relativo NATGateway.

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet1

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

# SECURITY GROUP
# Questo security group permette il traffico in entrata con:
# - il protocollo HTTP sulla porta 80.
# - il protocollo SSH sulla porta 22.
# - il protocollo HTTPS sulla porta 443.

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for WordPress instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # AutoscalingGroup
  # Il gruppo può variare tra 2 e 4 istanze, mantenendo sempre almeno due istanze attive(desired).
  # Il periodo di cooldown assicura che le modifiche dello stato vengano effettuate con un ritardo minimo 
  # di tempo d'attesa tra ogni modifica dello stato del gruppo di 5 minuti (300s).
  # !Ref al target group del nostro bilanciatore di carico per gestire il traffico in entrata.

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      Cooldown: "300"
      DesiredCapacity: "2"
      MaxSize: "4"
      MinSize: "2"
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
      - !Ref TargetGroup

  # Questo launch configuration genera le istanze ec2 con ami linux per la region eu-west-1

  # #!/bin/bash  : "shebang line", indica all'interprete di shell di utilizzare il programma bash per eseguire lo script.
  # yum update -y : package manager yum (utilizzato in distribuzioni basate su Red Hat come CentOS e Fedora) per aggiornare tutti i pacchetti del sistema operativo.
  # yum install -y httpd php php-mysql :     httpd: Il server web Apache. php: Il linguaggio di scripting PHP. php-mysql: L'estensione PHP per la connessione a database MySQL.
  # systemctl enable httpd  :  abilita il servizio Apache (httpd) affinché si avvii automaticamente all'avvio del sistema.
  # systemctl start httpd : Qui il servizio Apache viene effettivamente avviato.
  # echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php  :  Viene creato un file phpinfo.php nella directory di base del server web (/var/www/html/). Questo file contiene una semplice pagina PHP che mostra le informazioni sulla configurazione di PHP e del server.
  # cd /var/www/html  :  Si entra nella directory di base del server web.
  # wget https://wordpress.org/$%7BWordPressVersion%7D.tar.gz  :  Qui viene scaricato il pacchetto di installazione di WordPress dal sito ufficiale. La variabile per il versionamento ${WordPressVersion} deve essere configurata durante il lancio con la versione specifica di WordPress che si desidera scaricare. Ad esempio, 5.8.1.
  # tar -xzvf ${WordPressVersion}.tar.gz  :   Questo estrae il contenuto del pacchetto di WordPress appena scaricato.
  # cp -R wordpress/* /var/www/html/   :  Vengono copiati tutti i file e le cartelle estratti dalla directory wordpress/ alla directory di base del server web.
  # rm -rf wordpress latest.tar.gz  :  Vengono rimossi il pacchetto di WordPress scaricato e la cartella estratta che non è più necessaria.
  # chown -R apache:apache /var/www/html  :   Si cambiano i proprietari di tutti i file e le cartelle nella directory di base del server web in apache:apache. Questo è necessario per consentire ad Apache di accedere ai file.
  # chmod -R 755 /var/www/html  :  Si modificano i permessi dei file e delle cartelle nella directory di base del server web in modo che siano accessibili pubblicamente.
  # systemctl restart httpd  :   Infine, viene eseguito il riavvio del servizio Apache per applicare tutte le modifiche.

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-07be51e3c6d5f61d2
      KeyName: "wordpress"
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd php php-mysql 
          systemctl enable httpd
          systemctl start httpd
          echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
          cd /var/www/html
          wget https://wordpress.org/$%7BWordPressVersion%7D.tar.gz
          tar -xzvf ${WordPressVersion}.tar.gz
          cp -R wordpress/* /var/www/html/
          rm -rf wordpress latest.tar.gz
          chown -R apache:apache /var/www/html
          chmod -R 755 /var/www/html
          systemctl restart httpd


  # LoadBalancer
  # Bilanciatore di carico per le due subnet pubbliche.
  # Al bilanciatore è associato il security group,
  # e un attributo che specifica il tempo massimo di inattività consentito prima che una connessione sia considerata inattiva.

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref EC2SecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  # Listener per instradare le richieste in entrata sul bilanciatore
  # In questo caso corrisponde una DefaultActions con una fixed-response sulla porta 80 con protocollo HTTP.

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "200"
            ContentType: text/plain
            MessageBody: "Hello, WordPress!"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP


  # Target Group
  # il target group per gli indirizzamenti in entrata al load balancer, con target "instance" (le nostre istanze dell'Autoscaling).
  # protocollo HTTP ; Porta: 80
  # Può essere configurato con l'opzione "sticky sessions" (sessioni mantenute) per instradare le richieste dello stesso utente alla stessa istanza in un intervallo di tempo specificato.

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance

# Istanza di database relazionale (DB) su Amazon RDS 
# L'opzione "MultiAZ" è impostata su false, quindi non verrà utilizzata la replica in zone multiple. (è possibile abilitarla aggiornando la classe dell'istanza a "db.t3.micro", ma per questione di costi aggiuntivi lasceremo "db.t2.micro")
# L'opzione "StorageEncripted" è impostata su false, quindi l'archiviazione non verrà crittografata.

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref "SubnetGroup"
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: '5.7'
      MasterUsername: admin
      MasterUserPassword: admin123
      MultiAZ: false # bisogna cambiare in "true" per abilitare la replica in stand-by
      StorageType: gp2
      StorageEncrypted: false
    
# SubnetGroup per il DB
# Il gruppo di subnet definisce quali subnet all'interno del tuo VPC saranno utilizzate per le operazioni del database, come la replica e il failover.

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: "subnetgroup"
      DBSubnetGroupDescription: "Subnet Group per l'istanza database"
      SubnetIds:
      - !Ref "PrivateSubnet1"
      - !Ref "PrivateSubnet2"


# Security group per le regole in entrata al database.

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "DB Security Group"
      GroupDescription: "Gruppo per il traffico RDS"
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: "-1" # "-1" sta per "accetta tutti i protocolli consentiti", ovvero tcp, udp, icmp, e icmpv6.
        Description: "Regola in uscita verso tutto internet con qualsiasi protocollo"
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: tcp
        Description: "Regola di sicurezza in entrata dal security group delle istanze EC2"
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref EC2SecurityGroup

# Distribuzione CloudFront

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt 'LoadBalancer.DNSName'
          Id: elb
          CustomOriginConfig:
            OriginProtocolPolicy: 'https-only'
            OriginReadTimeout: 60
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ForwardedValues:
            QueryString: true
            Headers:
            - '*'
            Cookies:
              Forward: all
          TargetOriginId: elb
          ViewerProtocolPolicy: 'redirect-to-https'
          Compress: true
        CacheBehaviors:
        - PathPattern: wp-includes/*
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          DefaultTTL: 900
          MaxTTL: 900
          MinTTL: 900
          ForwardedValues:
            QueryString: true
            Headers:
            - 'Host'
          TargetOriginId: elb
          ViewerProtocolPolicy: 'redirect-to-https'
          Compress: true
        - PathPattern: wp-content/*
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          DefaultTTL: 900
          MaxTTL: 900
          MinTTL: 900
          ForwardedValues:
            QueryString: true
            Headers:
            - 'Host'
          TargetOriginId: elb
          ViewerProtocolPolicy: 'redirect-to-https'
          Compress: true
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        PriceClass: 'PriceClass_All'




Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
